/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import <TBase.h>
#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>

#import "OnesiteDao.h"
#import "OnesiteConstants.h"

#import "OnesiteApi.h"

@implementation Status

- (id) initWithCode: (int32_t) code message: (NSString *) message
{
  self = [super init];
  __code = code;
  __code_isset = YES;
  __message = [message retain];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"code"])
  {
    __code = [decoder decodeInt32ForKey: @"code"];
    __code_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__code_isset)
  {
    [encoder encodeInt32: __code forKey: @"code"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (void) dealloc
{
  [__message release];
  [super dealloc];
}

- (int32_t) code {
  return __code;
}

- (void) setCode: (int32_t) code {
  __code = code;
  __code_isset = YES;
}

- (BOOL) codeIsSet {
  return __code_isset;
}

- (void) unsetCode {
  __code_isset = NO;
}

- (NSString *) message {
  return [[__message retain] autorelease];
}

- (void) setMessage: (NSString *) message {
  [message retain];
  [__message release];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  [super read:inProtocol];
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [super write:outProtocol];
  [outProtocol writeStructBeginWithName: @"Status"];
  if (__code_isset) {
    [outProtocol writeFieldBeginWithName: @"code" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __code];
    [outProtocol writeFieldEnd];
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Status("];
  [ms appendString: @"code:"];
  [ms appendFormat: @"%i", __code];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResponseError

- (id) initWithStatus: (Status *) status
{
  self = [super init];
  __status = [status retain];
  __status_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [[decoder decodeObjectForKey: @"status"] retain];
    __status_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeObject: __status forKey: @"status"];
  }
}

- (void) dealloc
{
  [__status release];
  [super dealloc];
}

- (Status *) status {
  return [[__status retain] autorelease];
}

- (void) setStatus: (Status *) status {
  [status retain];
  [__status release];
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  [__status release];
  __status = nil;
  __status_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  [super read:inProtocol];
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Status *fieldValue = [[Status alloc] init];
          [fieldValue read: inProtocol];
          [self setStatus: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [super write:outProtocol];
  [outProtocol writeStructBeginWithName: @"ResponseError"];
  if (__status_isset) {
    if (__status != nil) {
      [outProtocol writeFieldBeginWithName: @"status" type: TType_STRUCT fieldID: 1];
      [__status write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResponseError("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%@", __status];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResponseString

- (id) initWithStatus: (Status *) status content: (NSString *) content
{
  self = [super init];
  __status = [status retain];
  __status_isset = YES;
  __content = [content retain];
  __content_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [[decoder decodeObjectForKey: @"status"] retain];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"content"])
  {
    __content = [[decoder decodeObjectForKey: @"content"] retain];
    __content_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeObject: __status forKey: @"status"];
  }
  if (__content_isset)
  {
    [encoder encodeObject: __content forKey: @"content"];
  }
}

- (void) dealloc
{
  [__status release];
  [__content release];
  [super dealloc];
}

- (Status *) status {
  return [[__status retain] autorelease];
}

- (void) setStatus: (Status *) status {
  [status retain];
  [__status release];
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  [__status release];
  __status = nil;
  __status_isset = NO;
}

- (NSString *) content {
  return [[__content retain] autorelease];
}

- (void) setContent: (NSString *) content {
  [content retain];
  [__content release];
  __content = content;
  __content_isset = YES;
}

- (BOOL) contentIsSet {
  return __content_isset;
}

- (void) unsetContent {
  [__content release];
  __content = nil;
  __content_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  [super read:inProtocol];
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Status *fieldValue = [[Status alloc] init];
          [fieldValue read: inProtocol];
          [self setStatus: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [super write:outProtocol];
  [outProtocol writeStructBeginWithName: @"ResponseString"];
  if (__status_isset) {
    if (__status != nil) {
      [outProtocol writeFieldBeginWithName: @"status" type: TType_STRUCT fieldID: 1];
      [__status write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__content_isset) {
    if (__content != nil) {
      [outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __content];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResponseString("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%@", __status];
  [ms appendString: @",content:"];
  [ms appendFormat: @"\"%@\"", __content];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResponseInt

- (id) initWithStatus: (Status *) status content: (int32_t) content
{
  self = [super init];
  __status = [status retain];
  __status_isset = YES;
  __content = content;
  __content_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [[decoder decodeObjectForKey: @"status"] retain];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"content"])
  {
    __content = [decoder decodeInt32ForKey: @"content"];
    __content_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeObject: __status forKey: @"status"];
  }
  if (__content_isset)
  {
    [encoder encodeInt32: __content forKey: @"content"];
  }
}

- (void) dealloc
{
  [__status release];
  [super dealloc];
}

- (Status *) status {
  return [[__status retain] autorelease];
}

- (void) setStatus: (Status *) status {
  [status retain];
  [__status release];
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  [__status release];
  __status = nil;
  __status_isset = NO;
}

- (int32_t) content {
  return __content;
}

- (void) setContent: (int32_t) content {
  __content = content;
  __content_isset = YES;
}

- (BOOL) contentIsSet {
  return __content_isset;
}

- (void) unsetContent {
  __content_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  [super read:inProtocol];
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Status *fieldValue = [[Status alloc] init];
          [fieldValue read: inProtocol];
          [self setStatus: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [super write:outProtocol];
  [outProtocol writeStructBeginWithName: @"ResponseInt"];
  if (__status_isset) {
    if (__status != nil) {
      [outProtocol writeFieldBeginWithName: @"status" type: TType_STRUCT fieldID: 1];
      [__status write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__content_isset) {
    [outProtocol writeFieldBeginWithName: @"content" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __content];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResponseInt("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%@", __status];
  [ms appendString: @",content:"];
  [ms appendFormat: @"%i", __content];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResponseLong

- (id) initWithStatus: (Status *) status content: (int64_t) content
{
  self = [super init];
  __status = [status retain];
  __status_isset = YES;
  __content = content;
  __content_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [[decoder decodeObjectForKey: @"status"] retain];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"content"])
  {
    __content = [decoder decodeInt64ForKey: @"content"];
    __content_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeObject: __status forKey: @"status"];
  }
  if (__content_isset)
  {
    [encoder encodeInt64: __content forKey: @"content"];
  }
}

- (void) dealloc
{
  [__status release];
  [super dealloc];
}

- (Status *) status {
  return [[__status retain] autorelease];
}

- (void) setStatus: (Status *) status {
  [status retain];
  [__status release];
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  [__status release];
  __status = nil;
  __status_isset = NO;
}

- (int64_t) content {
  return __content;
}

- (void) setContent: (int64_t) content {
  __content = content;
  __content_isset = YES;
}

- (BOOL) contentIsSet {
  return __content_isset;
}

- (void) unsetContent {
  __content_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  [super read:inProtocol];
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Status *fieldValue = [[Status alloc] init];
          [fieldValue read: inProtocol];
          [self setStatus: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [super write:outProtocol];
  [outProtocol writeStructBeginWithName: @"ResponseLong"];
  if (__status_isset) {
    if (__status != nil) {
      [outProtocol writeFieldBeginWithName: @"status" type: TType_STRUCT fieldID: 1];
      [__status write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__content_isset) {
    [outProtocol writeFieldBeginWithName: @"content" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __content];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResponseLong("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%@", __status];
  [ms appendString: @",content:"];
  [ms appendFormat: @"%qi", __content];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResponseBoolean

- (id) initWithStatus: (Status *) status content: (BOOL) content
{
  self = [super init];
  __status = [status retain];
  __status_isset = YES;
  __content = content;
  __content_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [[decoder decodeObjectForKey: @"status"] retain];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"content"])
  {
    __content = [decoder decodeBoolForKey: @"content"];
    __content_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeObject: __status forKey: @"status"];
  }
  if (__content_isset)
  {
    [encoder encodeBool: __content forKey: @"content"];
  }
}

- (void) dealloc
{
  [__status release];
  [super dealloc];
}

- (Status *) status {
  return [[__status retain] autorelease];
}

- (void) setStatus: (Status *) status {
  [status retain];
  [__status release];
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  [__status release];
  __status = nil;
  __status_isset = NO;
}

- (BOOL) content {
  return __content;
}

- (void) setContent: (BOOL) content {
  __content = content;
  __content_isset = YES;
}

- (BOOL) contentIsSet {
  return __content_isset;
}

- (void) unsetContent {
  __content_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  [super read:inProtocol];
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Status *fieldValue = [[Status alloc] init];
          [fieldValue read: inProtocol];
          [self setStatus: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [super write:outProtocol];
  [outProtocol writeStructBeginWithName: @"ResponseBoolean"];
  if (__status_isset) {
    if (__status != nil) {
      [outProtocol writeFieldBeginWithName: @"status" type: TType_STRUCT fieldID: 1];
      [__status write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__content_isset) {
    [outProtocol writeFieldBeginWithName: @"content" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __content];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResponseBoolean("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%@", __status];
  [ms appendString: @",content:"];
  [ms appendFormat: @"%i", __content];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResponseSession

- (id) initWithStatus: (Status *) status session: (Session *) session
{
  self = [super init];
  __status = [status retain];
  __status_isset = YES;
  __session = [session retain];
  __session_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [[decoder decodeObjectForKey: @"status"] retain];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain];
    __session_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeObject: __status forKey: @"status"];
  }
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
}

- (void) dealloc
{
  [__status release];
  [__session release];
  [super dealloc];
}

- (Status *) status {
  return [[__status retain] autorelease];
}

- (void) setStatus: (Status *) status {
  [status retain];
  [__status release];
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  [__status release];
  __status = nil;
  __status_isset = NO;
}

- (Session *) session {
  return [[__session retain] autorelease];
}

- (void) setSession: (Session *) session {
  [session retain];
  [__session release];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release];
  __session = nil;
  __session_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  [super read:inProtocol];
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Status *fieldValue = [[Status alloc] init];
          [fieldValue read: inProtocol];
          [self setStatus: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Session *fieldValue = [[Session alloc] init];
          [fieldValue read: inProtocol];
          [self setSession: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [super write:outProtocol];
  [outProtocol writeStructBeginWithName: @"ResponseSession"];
  if (__status_isset) {
    if (__status != nil) {
      [outProtocol writeFieldBeginWithName: @"status" type: TType_STRUCT fieldID: 1];
      [__status write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRUCT fieldID: 2];
      [__session write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResponseSession("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%@", __status];
  [ms appendString: @",session:"];
  [ms appendFormat: @"%@", __session];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserCreateOptions

- (id) initWithSendConfirmationEmail: (BOOL) sendConfirmationEmail referringUrl: (NSString *) referringUrl addInitialFriend: (int64_t) addInitialFriend joinInitialGroup: (int64_t) joinInitialGroup groupMemberStatus: (int) groupMemberStatus couponCode: (NSString *) couponCode
{
  self = [super init];
  __sendConfirmationEmail = sendConfirmationEmail;
  __sendConfirmationEmail_isset = YES;
  __referringUrl = [referringUrl retain];
  __referringUrl_isset = YES;
  __addInitialFriend = addInitialFriend;
  __addInitialFriend_isset = YES;
  __joinInitialGroup = joinInitialGroup;
  __joinInitialGroup_isset = YES;
  __groupMemberStatus = groupMemberStatus;
  __groupMemberStatus_isset = YES;
  __couponCode = [couponCode retain];
  __couponCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sendConfirmationEmail"])
  {
    __sendConfirmationEmail = [decoder decodeBoolForKey: @"sendConfirmationEmail"];
    __sendConfirmationEmail_isset = YES;
  }
  if ([decoder containsValueForKey: @"referringUrl"])
  {
    __referringUrl = [[decoder decodeObjectForKey: @"referringUrl"] retain];
    __referringUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"addInitialFriend"])
  {
    __addInitialFriend = [decoder decodeInt64ForKey: @"addInitialFriend"];
    __addInitialFriend_isset = YES;
  }
  if ([decoder containsValueForKey: @"joinInitialGroup"])
  {
    __joinInitialGroup = [decoder decodeInt64ForKey: @"joinInitialGroup"];
    __joinInitialGroup_isset = YES;
  }
  if ([decoder containsValueForKey: @"groupMemberStatus"])
  {
    __groupMemberStatus = [decoder decodeIntForKey: @"groupMemberStatus"];
    __groupMemberStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"couponCode"])
  {
    __couponCode = [[decoder decodeObjectForKey: @"couponCode"] retain];
    __couponCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sendConfirmationEmail_isset)
  {
    [encoder encodeBool: __sendConfirmationEmail forKey: @"sendConfirmationEmail"];
  }
  if (__referringUrl_isset)
  {
    [encoder encodeObject: __referringUrl forKey: @"referringUrl"];
  }
  if (__addInitialFriend_isset)
  {
    [encoder encodeInt64: __addInitialFriend forKey: @"addInitialFriend"];
  }
  if (__joinInitialGroup_isset)
  {
    [encoder encodeInt64: __joinInitialGroup forKey: @"joinInitialGroup"];
  }
  if (__groupMemberStatus_isset)
  {
    [encoder encodeInt: __groupMemberStatus forKey: @"groupMemberStatus"];
  }
  if (__couponCode_isset)
  {
    [encoder encodeObject: __couponCode forKey: @"couponCode"];
  }
}

- (void) dealloc
{
  [__referringUrl release];
  [__couponCode release];
  [super dealloc];
}

- (BOOL) sendConfirmationEmail {
  return __sendConfirmationEmail;
}

- (void) setSendConfirmationEmail: (BOOL) sendConfirmationEmail {
  __sendConfirmationEmail = sendConfirmationEmail;
  __sendConfirmationEmail_isset = YES;
}

- (BOOL) sendConfirmationEmailIsSet {
  return __sendConfirmationEmail_isset;
}

- (void) unsetSendConfirmationEmail {
  __sendConfirmationEmail_isset = NO;
}

- (NSString *) referringUrl {
  return [[__referringUrl retain] autorelease];
}

- (void) setReferringUrl: (NSString *) referringUrl {
  [referringUrl retain];
  [__referringUrl release];
  __referringUrl = referringUrl;
  __referringUrl_isset = YES;
}

- (BOOL) referringUrlIsSet {
  return __referringUrl_isset;
}

- (void) unsetReferringUrl {
  [__referringUrl release];
  __referringUrl = nil;
  __referringUrl_isset = NO;
}

- (int64_t) addInitialFriend {
  return __addInitialFriend;
}

- (void) setAddInitialFriend: (int64_t) addInitialFriend {
  __addInitialFriend = addInitialFriend;
  __addInitialFriend_isset = YES;
}

- (BOOL) addInitialFriendIsSet {
  return __addInitialFriend_isset;
}

- (void) unsetAddInitialFriend {
  __addInitialFriend_isset = NO;
}

- (int64_t) joinInitialGroup {
  return __joinInitialGroup;
}

- (void) setJoinInitialGroup: (int64_t) joinInitialGroup {
  __joinInitialGroup = joinInitialGroup;
  __joinInitialGroup_isset = YES;
}

- (BOOL) joinInitialGroupIsSet {
  return __joinInitialGroup_isset;
}

- (void) unsetJoinInitialGroup {
  __joinInitialGroup_isset = NO;
}

- (int) groupMemberStatus {
  return __groupMemberStatus;
}

- (void) setGroupMemberStatus: (int) groupMemberStatus {
  __groupMemberStatus = groupMemberStatus;
  __groupMemberStatus_isset = YES;
}

- (BOOL) groupMemberStatusIsSet {
  return __groupMemberStatus_isset;
}

- (void) unsetGroupMemberStatus {
  __groupMemberStatus_isset = NO;
}

- (NSString *) couponCode {
  return [[__couponCode retain] autorelease];
}

- (void) setCouponCode: (NSString *) couponCode {
  [couponCode retain];
  [__couponCode release];
  __couponCode = couponCode;
  __couponCode_isset = YES;
}

- (BOOL) couponCodeIsSet {
  return __couponCode_isset;
}

- (void) unsetCouponCode {
  [__couponCode release];
  __couponCode = nil;
  __couponCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  [super read:inProtocol];
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSendConfirmationEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReferringUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAddInitialFriend: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setJoinInitialGroup: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setGroupMemberStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCouponCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [super write:outProtocol];
  [outProtocol writeStructBeginWithName: @"UserCreateOptions"];
  if (__sendConfirmationEmail_isset) {
    [outProtocol writeFieldBeginWithName: @"sendConfirmationEmail" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __sendConfirmationEmail];
    [outProtocol writeFieldEnd];
  }
  if (__referringUrl_isset) {
    if (__referringUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"referringUrl" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __referringUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__addInitialFriend_isset) {
    [outProtocol writeFieldBeginWithName: @"addInitialFriend" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __addInitialFriend];
    [outProtocol writeFieldEnd];
  }
  if (__joinInitialGroup_isset) {
    [outProtocol writeFieldBeginWithName: @"joinInitialGroup" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __joinInitialGroup];
    [outProtocol writeFieldEnd];
  }
  if (__groupMemberStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"groupMemberStatus" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __groupMemberStatus];
    [outProtocol writeFieldEnd];
  }
  if (__couponCode_isset) {
    if (__couponCode != nil) {
      [outProtocol writeFieldBeginWithName: @"couponCode" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __couponCode];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserCreateOptions("];
  [ms appendString: @"sendConfirmationEmail:"];
  [ms appendFormat: @"%i", __sendConfirmationEmail];
  [ms appendString: @",referringUrl:"];
  [ms appendFormat: @"\"%@\"", __referringUrl];
  [ms appendString: @",addInitialFriend:"];
  [ms appendFormat: @"%qi", __addInitialFriend];
  [ms appendString: @",joinInitialGroup:"];
  [ms appendFormat: @"%qi", __joinInitialGroup];
  [ms appendString: @",groupMemberStatus:"];
  [ms appendFormat: @"%i", __groupMemberStatus];
  [ms appendString: @",couponCode:"];
  [ms appendFormat: @"\"%@\"", __couponCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SessionOptions

- (id) initWithUseAccessToken: (BOOL) useAccessToken
{
  self = [super init];
  __useAccessToken = useAccessToken;
  __useAccessToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"useAccessToken"])
  {
    __useAccessToken = [decoder decodeBoolForKey: @"useAccessToken"];
    __useAccessToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__useAccessToken_isset)
  {
    [encoder encodeBool: __useAccessToken forKey: @"useAccessToken"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (BOOL) useAccessToken {
  return __useAccessToken;
}

- (void) setUseAccessToken: (BOOL) useAccessToken {
  __useAccessToken = useAccessToken;
  __useAccessToken_isset = YES;
}

- (BOOL) useAccessTokenIsSet {
  return __useAccessToken_isset;
}

- (void) unsetUseAccessToken {
  __useAccessToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  [super read:inProtocol];
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setUseAccessToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [super write:outProtocol];
  [outProtocol writeStructBeginWithName: @"SessionOptions"];
  if (__useAccessToken_isset) {
    [outProtocol writeFieldBeginWithName: @"useAccessToken" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __useAccessToken];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SessionOptions("];
  [ms appendString: @"useAccessToken:"];
  [ms appendFormat: @"%i", __useAccessToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResponseUser

- (id) initWithStatus: (Status *) status user: (User *) user
{
  self = [super init];
  __status = [status retain];
  __status_isset = YES;
  __user = [user retain];
  __user_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [[decoder decodeObjectForKey: @"status"] retain];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"user"])
  {
    __user = [[decoder decodeObjectForKey: @"user"] retain];
    __user_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeObject: __status forKey: @"status"];
  }
  if (__user_isset)
  {
    [encoder encodeObject: __user forKey: @"user"];
  }
}

- (void) dealloc
{
  [__status release];
  [__user release];
  [super dealloc];
}

- (Status *) status {
  return [[__status retain] autorelease];
}

- (void) setStatus: (Status *) status {
  [status retain];
  [__status release];
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  [__status release];
  __status = nil;
  __status_isset = NO;
}

- (User *) user {
  return [[__user retain] autorelease];
}

- (void) setUser: (User *) user {
  [user retain];
  [__user release];
  __user = user;
  __user_isset = YES;
}

- (BOOL) userIsSet {
  return __user_isset;
}

- (void) unsetUser {
  [__user release];
  __user = nil;
  __user_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  [super read:inProtocol];
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Status *fieldValue = [[Status alloc] init];
          [fieldValue read: inProtocol];
          [self setStatus: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          User *fieldValue = [[User alloc] init];
          [fieldValue read: inProtocol];
          [self setUser: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [super write:outProtocol];
  [outProtocol writeStructBeginWithName: @"ResponseUser"];
  if (__status_isset) {
    if (__status != nil) {
      [outProtocol writeFieldBeginWithName: @"status" type: TType_STRUCT fieldID: 1];
      [__status write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_isset) {
    if (__user != nil) {
      [outProtocol writeFieldBeginWithName: @"user" type: TType_STRUCT fieldID: 2];
      [__user write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResponseUser("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%@", __status];
  [ms appendString: @",user:"];
  [ms appendFormat: @"%@", __user];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResponseExternalProperty

- (id) initWithStatus: (Status *) status externalProperty: (ExternalProperty *) externalProperty
{
  self = [super init];
  __status = [status retain];
  __status_isset = YES;
  __externalProperty = [externalProperty retain];
  __externalProperty_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [[decoder decodeObjectForKey: @"status"] retain];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"externalProperty"])
  {
    __externalProperty = [[decoder decodeObjectForKey: @"externalProperty"] retain];
    __externalProperty_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeObject: __status forKey: @"status"];
  }
  if (__externalProperty_isset)
  {
    [encoder encodeObject: __externalProperty forKey: @"externalProperty"];
  }
}

- (void) dealloc
{
  [__status release];
  [__externalProperty release];
  [super dealloc];
}

- (Status *) status {
  return [[__status retain] autorelease];
}

- (void) setStatus: (Status *) status {
  [status retain];
  [__status release];
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  [__status release];
  __status = nil;
  __status_isset = NO;
}

- (ExternalProperty *) externalProperty {
  return [[__externalProperty retain] autorelease];
}

- (void) setExternalProperty: (ExternalProperty *) externalProperty {
  [externalProperty retain];
  [__externalProperty release];
  __externalProperty = externalProperty;
  __externalProperty_isset = YES;
}

- (BOOL) externalPropertyIsSet {
  return __externalProperty_isset;
}

- (void) unsetExternalProperty {
  [__externalProperty release];
  __externalProperty = nil;
  __externalProperty_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  [super read:inProtocol];
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Status *fieldValue = [[Status alloc] init];
          [fieldValue read: inProtocol];
          [self setStatus: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          ExternalProperty *fieldValue = [[ExternalProperty alloc] init];
          [fieldValue read: inProtocol];
          [self setExternalProperty: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [super write:outProtocol];
  [outProtocol writeStructBeginWithName: @"ResponseExternalProperty"];
  if (__status_isset) {
    if (__status != nil) {
      [outProtocol writeFieldBeginWithName: @"status" type: TType_STRUCT fieldID: 1];
      [__status write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__externalProperty_isset) {
    if (__externalProperty != nil) {
      [outProtocol writeFieldBeginWithName: @"externalProperty" type: TType_STRUCT fieldID: 2];
      [__externalProperty write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResponseExternalProperty("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%@", __status];
  [ms appendString: @",externalProperty:"];
  [ms appendFormat: @"%@", __externalProperty];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResponseExternalAccount

- (id) initWithStatus: (Status *) status externalAccount: (ExternalAccount *) externalAccount
{
  self = [super init];
  __status = [status retain];
  __status_isset = YES;
  __externalAccount = [externalAccount retain];
  __externalAccount_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [[decoder decodeObjectForKey: @"status"] retain];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"externalAccount"])
  {
    __externalAccount = [[decoder decodeObjectForKey: @"externalAccount"] retain];
    __externalAccount_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeObject: __status forKey: @"status"];
  }
  if (__externalAccount_isset)
  {
    [encoder encodeObject: __externalAccount forKey: @"externalAccount"];
  }
}

- (void) dealloc
{
  [__status release];
  [__externalAccount release];
  [super dealloc];
}

- (Status *) status {
  return [[__status retain] autorelease];
}

- (void) setStatus: (Status *) status {
  [status retain];
  [__status release];
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  [__status release];
  __status = nil;
  __status_isset = NO;
}

- (ExternalAccount *) externalAccount {
  return [[__externalAccount retain] autorelease];
}

- (void) setExternalAccount: (ExternalAccount *) externalAccount {
  [externalAccount retain];
  [__externalAccount release];
  __externalAccount = externalAccount;
  __externalAccount_isset = YES;
}

- (BOOL) externalAccountIsSet {
  return __externalAccount_isset;
}

- (void) unsetExternalAccount {
  [__externalAccount release];
  __externalAccount = nil;
  __externalAccount_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  [super read:inProtocol];
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Status *fieldValue = [[Status alloc] init];
          [fieldValue read: inProtocol];
          [self setStatus: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          ExternalAccount *fieldValue = [[ExternalAccount alloc] init];
          [fieldValue read: inProtocol];
          [self setExternalAccount: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [super write:outProtocol];
  [outProtocol writeStructBeginWithName: @"ResponseExternalAccount"];
  if (__status_isset) {
    if (__status != nil) {
      [outProtocol writeFieldBeginWithName: @"status" type: TType_STRUCT fieldID: 1];
      [__status write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__externalAccount_isset) {
    if (__externalAccount != nil) {
      [outProtocol writeFieldBeginWithName: @"externalAccount" type: TType_STRUCT fieldID: 2];
      [__externalAccount write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResponseExternalAccount("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%@", __status];
  [ms appendString: @",externalAccount:"];
  [ms appendFormat: @"%@", __externalAccount];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation OnesiteApiConstants
+ (void) initialize {
}
@end

