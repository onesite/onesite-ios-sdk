/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import <TBase.h>
#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>

#import "OnesiteConstants.h"

#import "OnesiteDao.h"

@implementation Password

- (id) initWithPassword: (NSString *) password encoded: (BOOL) encoded
{
  self = [super init];
  __password = [password retain];
  __password_isset = YES;
  __encoded = encoded;
  __encoded_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain];
    __password_isset = YES;
  }
  if ([decoder containsValueForKey: @"encoded"])
  {
    __encoded = [decoder decodeBoolForKey: @"encoded"];
    __encoded_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
  if (__encoded_isset)
  {
    [encoder encodeBool: __encoded forKey: @"encoded"];
  }
}

- (void) dealloc
{
  [__password release];
  [super dealloc];
}

- (NSString *) password {
  return [[__password retain] autorelease];
}

- (void) setPassword: (NSString *) password {
  [password retain];
  [__password release];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release];
  __password = nil;
  __password_isset = NO;
}

- (BOOL) encoded {
  return __encoded;
}

- (void) setEncoded: (BOOL) encoded {
  __encoded = encoded;
  __encoded_isset = YES;
}

- (BOOL) encodedIsSet {
  return __encoded_isset;
}

- (void) unsetEncoded {
  __encoded_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  [super read:inProtocol];
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setEncoded: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [super write:outProtocol];
  [outProtocol writeStructBeginWithName: @"Password"];
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  if (__encoded_isset) {
    [outProtocol writeFieldBeginWithName: @"encoded" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __encoded];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Password("];
  [ms appendString: @"password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @",encoded:"];
  [ms appendFormat: @"%i", __encoded];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Site

- (id) initWithId: (int64_t) id subdir: (NSString *) subdir url: (NSString *) url
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __subdir = [subdir retain];
  __subdir_isset = YES;
  __url = [url retain];
  __url_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"subdir"])
  {
    __subdir = [[decoder decodeObjectForKey: @"subdir"] retain];
    __subdir_isset = YES;
  }
  if ([decoder containsValueForKey: @"url"])
  {
    __url = [[decoder decodeObjectForKey: @"url"] retain];
    __url_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__subdir_isset)
  {
    [encoder encodeObject: __subdir forKey: @"subdir"];
  }
  if (__url_isset)
  {
    [encoder encodeObject: __url forKey: @"url"];
  }
}

- (void) dealloc
{
  [__subdir release];
  [__url release];
  [super dealloc];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) subdir {
  return [[__subdir retain] autorelease];
}

- (void) setSubdir: (NSString *) subdir {
  [subdir retain];
  [__subdir release];
  __subdir = subdir;
  __subdir_isset = YES;
}

- (BOOL) subdirIsSet {
  return __subdir_isset;
}

- (void) unsetSubdir {
  [__subdir release];
  __subdir = nil;
  __subdir_isset = NO;
}

- (NSString *) url {
  return [[__url retain] autorelease];
}

- (void) setUrl: (NSString *) url {
  [url retain];
  [__url release];
  __url = url;
  __url_isset = YES;
}

- (BOOL) urlIsSet {
  return __url_isset;
}

- (void) unsetUrl {
  [__url release];
  __url = nil;
  __url_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  [super read:inProtocol];
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSubdir: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [super write:outProtocol];
  [outProtocol writeStructBeginWithName: @"Site"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__subdir_isset) {
    if (__subdir != nil) {
      [outProtocol writeFieldBeginWithName: @"subdir" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __subdir];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url_isset) {
    if (__url != nil) {
      [outProtocol writeFieldBeginWithName: @"url" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __url];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Site("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",subdir:"];
  [ms appendFormat: @"\"%@\"", __subdir];
  [ms appendString: @",url:"];
  [ms appendFormat: @"\"%@\"", __url];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ExternalAccount

- (id) initWithProviderName: (NSString *) providerName userIdentifier: (NSString *) userIdentifier accessToken: (NSString *) accessToken
{
  self = [super init];
  __providerName = [providerName retain];
  __providerName_isset = YES;
  __userIdentifier = [userIdentifier retain];
  __userIdentifier_isset = YES;
  __accessToken = [accessToken retain];
  __accessToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"providerName"])
  {
    __providerName = [[decoder decodeObjectForKey: @"providerName"] retain];
    __providerName_isset = YES;
  }
  if ([decoder containsValueForKey: @"userIdentifier"])
  {
    __userIdentifier = [[decoder decodeObjectForKey: @"userIdentifier"] retain];
    __userIdentifier_isset = YES;
  }
  if ([decoder containsValueForKey: @"accessToken"])
  {
    __accessToken = [[decoder decodeObjectForKey: @"accessToken"] retain];
    __accessToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__providerName_isset)
  {
    [encoder encodeObject: __providerName forKey: @"providerName"];
  }
  if (__userIdentifier_isset)
  {
    [encoder encodeObject: __userIdentifier forKey: @"userIdentifier"];
  }
  if (__accessToken_isset)
  {
    [encoder encodeObject: __accessToken forKey: @"accessToken"];
  }
}

- (void) dealloc
{
  [__providerName release];
  [__userIdentifier release];
  [__accessToken release];
  [super dealloc];
}

- (NSString *) providerName {
  return [[__providerName retain] autorelease];
}

- (void) setProviderName: (NSString *) providerName {
  [providerName retain];
  [__providerName release];
  __providerName = providerName;
  __providerName_isset = YES;
}

- (BOOL) providerNameIsSet {
  return __providerName_isset;
}

- (void) unsetProviderName {
  [__providerName release];
  __providerName = nil;
  __providerName_isset = NO;
}

- (NSString *) userIdentifier {
  return [[__userIdentifier retain] autorelease];
}

- (void) setUserIdentifier: (NSString *) userIdentifier {
  [userIdentifier retain];
  [__userIdentifier release];
  __userIdentifier = userIdentifier;
  __userIdentifier_isset = YES;
}

- (BOOL) userIdentifierIsSet {
  return __userIdentifier_isset;
}

- (void) unsetUserIdentifier {
  [__userIdentifier release];
  __userIdentifier = nil;
  __userIdentifier_isset = NO;
}

- (NSString *) accessToken {
  return [[__accessToken retain] autorelease];
}

- (void) setAccessToken: (NSString *) accessToken {
  [accessToken retain];
  [__accessToken release];
  __accessToken = accessToken;
  __accessToken_isset = YES;
}

- (BOOL) accessTokenIsSet {
  return __accessToken_isset;
}

- (void) unsetAccessToken {
  [__accessToken release];
  __accessToken = nil;
  __accessToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  [super read:inProtocol];
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProviderName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserIdentifier: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccessToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [super write:outProtocol];
  [outProtocol writeStructBeginWithName: @"ExternalAccount"];
  if (__providerName_isset) {
    if (__providerName != nil) {
      [outProtocol writeFieldBeginWithName: @"providerName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __providerName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userIdentifier_isset) {
    if (__userIdentifier != nil) {
      [outProtocol writeFieldBeginWithName: @"userIdentifier" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __userIdentifier];
      [outProtocol writeFieldEnd];
    }
  }
  if (__accessToken_isset) {
    if (__accessToken != nil) {
      [outProtocol writeFieldBeginWithName: @"accessToken" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __accessToken];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ExternalAccount("];
  [ms appendString: @"providerName:"];
  [ms appendFormat: @"\"%@\"", __providerName];
  [ms appendString: @",userIdentifier:"];
  [ms appendFormat: @"\"%@\"", __userIdentifier];
  [ms appendString: @",accessToken:"];
  [ms appendFormat: @"\"%@\"", __accessToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ExternalProperty

- (id) initWithName: (NSString *) name type: (NSString *) type value: (NSString *) value
{
  self = [super init];
  __name = [name retain];
  __name_isset = YES;
  __type = [type retain];
  __type_isset = YES;
  __value = [value retain];
  __value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [[decoder decodeObjectForKey: @"type"] retain];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"value"])
  {
    __value = [[decoder decodeObjectForKey: @"value"] retain];
    __value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__type_isset)
  {
    [encoder encodeObject: __type forKey: @"type"];
  }
  if (__value_isset)
  {
    [encoder encodeObject: __value forKey: @"value"];
  }
}

- (void) dealloc
{
  [__name release];
  [__type release];
  [__value release];
  [super dealloc];
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) type {
  return [[__type retain] autorelease];
}

- (void) setType: (NSString *) type {
  [type retain];
  [__type release];
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  [__type release];
  __type = nil;
  __type_isset = NO;
}

- (NSString *) value {
  return [[__value retain] autorelease];
}

- (void) setValue: (NSString *) value {
  [value retain];
  [__value release];
  __value = value;
  __value_isset = YES;
}

- (BOOL) valueIsSet {
  return __value_isset;
}

- (void) unsetValue {
  [__value release];
  __value = nil;
  __value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  [super read:inProtocol];
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [super write:outProtocol];
  [outProtocol writeStructBeginWithName: @"ExternalProperty"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    if (__type != nil) {
      [outProtocol writeFieldBeginWithName: @"type" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __type];
      [outProtocol writeFieldEnd];
    }
  }
  if (__value_isset) {
    if (__value != nil) {
      [outProtocol writeFieldBeginWithName: @"value" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __value];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ExternalProperty("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",type:"];
  [ms appendFormat: @"\"%@\"", __type];
  [ms appendString: @",value:"];
  [ms appendFormat: @"\"%@\"", __value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Profile

- (id) initWithBirthday: (int64_t) birthday firstName: (NSString *) firstName lastName: (NSString *) lastName gender: (int) gender address: (NSString *) address address2: (NSString *) address2 city: (NSString *) city state: (NSString *) state zip: (NSString *) zip country: (NSString *) country location: (NSString *) location timezone: (int64_t) timezone phone: (NSString *) phone quote: (NSString *) quote locale: (NSString *) locale
{
  self = [super init];
  __birthday = birthday;
  __birthday_isset = YES;
  __firstName = [firstName retain];
  __firstName_isset = YES;
  __lastName = [lastName retain];
  __lastName_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  __address = [address retain];
  __address_isset = YES;
  __address2 = [address2 retain];
  __address2_isset = YES;
  __city = [city retain];
  __city_isset = YES;
  __state = [state retain];
  __state_isset = YES;
  __zip = [zip retain];
  __zip_isset = YES;
  __country = [country retain];
  __country_isset = YES;
  __location = [location retain];
  __location_isset = YES;
  __timezone = timezone;
  __timezone_isset = YES;
  __phone = [phone retain];
  __phone_isset = YES;
  __quote = [quote retain];
  __quote_isset = YES;
  __locale = [locale retain];
  __locale_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"birthday"])
  {
    __birthday = [decoder decodeInt64ForKey: @"birthday"];
    __birthday_isset = YES;
  }
  if ([decoder containsValueForKey: @"firstName"])
  {
    __firstName = [[decoder decodeObjectForKey: @"firstName"] retain];
    __firstName_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastName"])
  {
    __lastName = [[decoder decodeObjectForKey: @"lastName"] retain];
    __lastName_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeIntForKey: @"gender"];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"address2"])
  {
    __address2 = [[decoder decodeObjectForKey: @"address2"] retain];
    __address2_isset = YES;
  }
  if ([decoder containsValueForKey: @"city"])
  {
    __city = [[decoder decodeObjectForKey: @"city"] retain];
    __city_isset = YES;
  }
  if ([decoder containsValueForKey: @"state"])
  {
    __state = [[decoder decodeObjectForKey: @"state"] retain];
    __state_isset = YES;
  }
  if ([decoder containsValueForKey: @"zip"])
  {
    __zip = [[decoder decodeObjectForKey: @"zip"] retain];
    __zip_isset = YES;
  }
  if ([decoder containsValueForKey: @"country"])
  {
    __country = [[decoder decodeObjectForKey: @"country"] retain];
    __country_isset = YES;
  }
  if ([decoder containsValueForKey: @"location"])
  {
    __location = [[decoder decodeObjectForKey: @"location"] retain];
    __location_isset = YES;
  }
  if ([decoder containsValueForKey: @"timezone"])
  {
    __timezone = [decoder decodeInt64ForKey: @"timezone"];
    __timezone_isset = YES;
  }
  if ([decoder containsValueForKey: @"phone"])
  {
    __phone = [[decoder decodeObjectForKey: @"phone"] retain];
    __phone_isset = YES;
  }
  if ([decoder containsValueForKey: @"quote"])
  {
    __quote = [[decoder decodeObjectForKey: @"quote"] retain];
    __quote_isset = YES;
  }
  if ([decoder containsValueForKey: @"locale"])
  {
    __locale = [[decoder decodeObjectForKey: @"locale"] retain];
    __locale_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__birthday_isset)
  {
    [encoder encodeInt64: __birthday forKey: @"birthday"];
  }
  if (__firstName_isset)
  {
    [encoder encodeObject: __firstName forKey: @"firstName"];
  }
  if (__lastName_isset)
  {
    [encoder encodeObject: __lastName forKey: @"lastName"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt: __gender forKey: @"gender"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__address2_isset)
  {
    [encoder encodeObject: __address2 forKey: @"address2"];
  }
  if (__city_isset)
  {
    [encoder encodeObject: __city forKey: @"city"];
  }
  if (__state_isset)
  {
    [encoder encodeObject: __state forKey: @"state"];
  }
  if (__zip_isset)
  {
    [encoder encodeObject: __zip forKey: @"zip"];
  }
  if (__country_isset)
  {
    [encoder encodeObject: __country forKey: @"country"];
  }
  if (__location_isset)
  {
    [encoder encodeObject: __location forKey: @"location"];
  }
  if (__timezone_isset)
  {
    [encoder encodeInt64: __timezone forKey: @"timezone"];
  }
  if (__phone_isset)
  {
    [encoder encodeObject: __phone forKey: @"phone"];
  }
  if (__quote_isset)
  {
    [encoder encodeObject: __quote forKey: @"quote"];
  }
  if (__locale_isset)
  {
    [encoder encodeObject: __locale forKey: @"locale"];
  }
}

- (void) dealloc
{
  [__firstName release];
  [__lastName release];
  [__address release];
  [__address2 release];
  [__city release];
  [__state release];
  [__zip release];
  [__country release];
  [__location release];
  [__phone release];
  [__quote release];
  [__locale release];
  [super dealloc];
}

- (int64_t) birthday {
  return __birthday;
}

- (void) setBirthday: (int64_t) birthday {
  __birthday = birthday;
  __birthday_isset = YES;
}

- (BOOL) birthdayIsSet {
  return __birthday_isset;
}

- (void) unsetBirthday {
  __birthday_isset = NO;
}

- (NSString *) firstName {
  return [[__firstName retain] autorelease];
}

- (void) setFirstName: (NSString *) firstName {
  [firstName retain];
  [__firstName release];
  __firstName = firstName;
  __firstName_isset = YES;
}

- (BOOL) firstNameIsSet {
  return __firstName_isset;
}

- (void) unsetFirstName {
  [__firstName release];
  __firstName = nil;
  __firstName_isset = NO;
}

- (NSString *) lastName {
  return [[__lastName retain] autorelease];
}

- (void) setLastName: (NSString *) lastName {
  [lastName retain];
  [__lastName release];
  __lastName = lastName;
  __lastName_isset = YES;
}

- (BOOL) lastNameIsSet {
  return __lastName_isset;
}

- (void) unsetLastName {
  [__lastName release];
  __lastName = nil;
  __lastName_isset = NO;
}

- (int) gender {
  return __gender;
}

- (void) setGender: (int) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (NSString *) address {
  return [[__address retain] autorelease];
}

- (void) setAddress: (NSString *) address {
  [address retain];
  [__address release];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release];
  __address = nil;
  __address_isset = NO;
}

- (NSString *) address2 {
  return [[__address2 retain] autorelease];
}

- (void) setAddress2: (NSString *) address2 {
  [address2 retain];
  [__address2 release];
  __address2 = address2;
  __address2_isset = YES;
}

- (BOOL) address2IsSet {
  return __address2_isset;
}

- (void) unsetAddress2 {
  [__address2 release];
  __address2 = nil;
  __address2_isset = NO;
}

- (NSString *) city {
  return [[__city retain] autorelease];
}

- (void) setCity: (NSString *) city {
  [city retain];
  [__city release];
  __city = city;
  __city_isset = YES;
}

- (BOOL) cityIsSet {
  return __city_isset;
}

- (void) unsetCity {
  [__city release];
  __city = nil;
  __city_isset = NO;
}

- (NSString *) state {
  return [[__state retain] autorelease];
}

- (void) setState: (NSString *) state {
  [state retain];
  [__state release];
  __state = state;
  __state_isset = YES;
}

- (BOOL) stateIsSet {
  return __state_isset;
}

- (void) unsetState {
  [__state release];
  __state = nil;
  __state_isset = NO;
}

- (NSString *) zip {
  return [[__zip retain] autorelease];
}

- (void) setZip: (NSString *) zip {
  [zip retain];
  [__zip release];
  __zip = zip;
  __zip_isset = YES;
}

- (BOOL) zipIsSet {
  return __zip_isset;
}

- (void) unsetZip {
  [__zip release];
  __zip = nil;
  __zip_isset = NO;
}

- (NSString *) country {
  return [[__country retain] autorelease];
}

- (void) setCountry: (NSString *) country {
  [country retain];
  [__country release];
  __country = country;
  __country_isset = YES;
}

- (BOOL) countryIsSet {
  return __country_isset;
}

- (void) unsetCountry {
  [__country release];
  __country = nil;
  __country_isset = NO;
}

- (NSString *) location {
  return [[__location retain] autorelease];
}

- (void) setLocation: (NSString *) location {
  [location retain];
  [__location release];
  __location = location;
  __location_isset = YES;
}

- (BOOL) locationIsSet {
  return __location_isset;
}

- (void) unsetLocation {
  [__location release];
  __location = nil;
  __location_isset = NO;
}

- (int64_t) timezone {
  return __timezone;
}

- (void) setTimezone: (int64_t) timezone {
  __timezone = timezone;
  __timezone_isset = YES;
}

- (BOOL) timezoneIsSet {
  return __timezone_isset;
}

- (void) unsetTimezone {
  __timezone_isset = NO;
}

- (NSString *) phone {
  return [[__phone retain] autorelease];
}

- (void) setPhone: (NSString *) phone {
  [phone retain];
  [__phone release];
  __phone = phone;
  __phone_isset = YES;
}

- (BOOL) phoneIsSet {
  return __phone_isset;
}

- (void) unsetPhone {
  [__phone release];
  __phone = nil;
  __phone_isset = NO;
}

- (NSString *) quote {
  return [[__quote retain] autorelease];
}

- (void) setQuote: (NSString *) quote {
  [quote retain];
  [__quote release];
  __quote = quote;
  __quote_isset = YES;
}

- (BOOL) quoteIsSet {
  return __quote_isset;
}

- (void) unsetQuote {
  [__quote release];
  __quote = nil;
  __quote_isset = NO;
}

- (NSString *) locale {
  return [[__locale retain] autorelease];
}

- (void) setLocale: (NSString *) locale {
  [locale retain];
  [__locale release];
  __locale = locale;
  __locale_isset = YES;
}

- (BOOL) localeIsSet {
  return __locale_isset;
}

- (void) unsetLocale {
  [__locale release];
  __locale = nil;
  __locale_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  [super read:inProtocol];
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setBirthday: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFirstName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLastName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress2: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setState: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setZip: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCountry: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLocation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTimezone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setQuote: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLocale: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [super write:outProtocol];
  [outProtocol writeStructBeginWithName: @"Profile"];
  if (__birthday_isset) {
    [outProtocol writeFieldBeginWithName: @"birthday" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __birthday];
    [outProtocol writeFieldEnd];
  }
  if (__firstName_isset) {
    if (__firstName != nil) {
      [outProtocol writeFieldBeginWithName: @"firstName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __firstName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lastName_isset) {
    if (__lastName != nil) {
      [outProtocol writeFieldBeginWithName: @"lastName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __lastName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __gender];
    [outProtocol writeFieldEnd];
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__address2_isset) {
    if (__address2 != nil) {
      [outProtocol writeFieldBeginWithName: @"address2" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __address2];
      [outProtocol writeFieldEnd];
    }
  }
  if (__city_isset) {
    if (__city != nil) {
      [outProtocol writeFieldBeginWithName: @"city" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __city];
      [outProtocol writeFieldEnd];
    }
  }
  if (__state_isset) {
    if (__state != nil) {
      [outProtocol writeFieldBeginWithName: @"state" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __state];
      [outProtocol writeFieldEnd];
    }
  }
  if (__zip_isset) {
    if (__zip != nil) {
      [outProtocol writeFieldBeginWithName: @"zip" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __zip];
      [outProtocol writeFieldEnd];
    }
  }
  if (__country_isset) {
    if (__country != nil) {
      [outProtocol writeFieldBeginWithName: @"country" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __country];
      [outProtocol writeFieldEnd];
    }
  }
  if (__location_isset) {
    if (__location != nil) {
      [outProtocol writeFieldBeginWithName: @"location" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __location];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timezone_isset) {
    [outProtocol writeFieldBeginWithName: @"timezone" type: TType_I64 fieldID: 12];
    [outProtocol writeI64: __timezone];
    [outProtocol writeFieldEnd];
  }
  if (__phone_isset) {
    if (__phone != nil) {
      [outProtocol writeFieldBeginWithName: @"phone" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __phone];
      [outProtocol writeFieldEnd];
    }
  }
  if (__quote_isset) {
    if (__quote != nil) {
      [outProtocol writeFieldBeginWithName: @"quote" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __quote];
      [outProtocol writeFieldEnd];
    }
  }
  if (__locale_isset) {
    if (__locale != nil) {
      [outProtocol writeFieldBeginWithName: @"locale" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __locale];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Profile("];
  [ms appendString: @"birthday:"];
  [ms appendFormat: @"%qi", __birthday];
  [ms appendString: @",firstName:"];
  [ms appendFormat: @"\"%@\"", __firstName];
  [ms appendString: @",lastName:"];
  [ms appendFormat: @"\"%@\"", __lastName];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%i", __gender];
  [ms appendString: @",address:"];
  [ms appendFormat: @"\"%@\"", __address];
  [ms appendString: @",address2:"];
  [ms appendFormat: @"\"%@\"", __address2];
  [ms appendString: @",city:"];
  [ms appendFormat: @"\"%@\"", __city];
  [ms appendString: @",state:"];
  [ms appendFormat: @"\"%@\"", __state];
  [ms appendString: @",zip:"];
  [ms appendFormat: @"\"%@\"", __zip];
  [ms appendString: @",country:"];
  [ms appendFormat: @"\"%@\"", __country];
  [ms appendString: @",location:"];
  [ms appendFormat: @"\"%@\"", __location];
  [ms appendString: @",timezone:"];
  [ms appendFormat: @"%qi", __timezone];
  [ms appendString: @",phone:"];
  [ms appendFormat: @"\"%@\"", __phone];
  [ms appendString: @",quote:"];
  [ms appendFormat: @"\"%@\"", __quote];
  [ms appendString: @",locale:"];
  [ms appendFormat: @"\"%@\"", __locale];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Preferences

- (id) initWithBirthdayDisplay: (int) birthdayDisplay friendshipApproval: (int) friendshipApproval commentsApproval: (int) commentsApproval messagePrivacy: (int) messagePrivacy emailNotification: (int) emailNotification searchable: (BOOL) searchable showOnlineStatus: (BOOL) showOnlineStatus
{
  self = [super init];
  __birthdayDisplay = birthdayDisplay;
  __birthdayDisplay_isset = YES;
  __friendshipApproval = friendshipApproval;
  __friendshipApproval_isset = YES;
  __commentsApproval = commentsApproval;
  __commentsApproval_isset = YES;
  __messagePrivacy = messagePrivacy;
  __messagePrivacy_isset = YES;
  __emailNotification = emailNotification;
  __emailNotification_isset = YES;
  __searchable = searchable;
  __searchable_isset = YES;
  __showOnlineStatus = showOnlineStatus;
  __showOnlineStatus_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"birthdayDisplay"])
  {
    __birthdayDisplay = [decoder decodeIntForKey: @"birthdayDisplay"];
    __birthdayDisplay_isset = YES;
  }
  if ([decoder containsValueForKey: @"friendshipApproval"])
  {
    __friendshipApproval = [decoder decodeIntForKey: @"friendshipApproval"];
    __friendshipApproval_isset = YES;
  }
  if ([decoder containsValueForKey: @"commentsApproval"])
  {
    __commentsApproval = [decoder decodeIntForKey: @"commentsApproval"];
    __commentsApproval_isset = YES;
  }
  if ([decoder containsValueForKey: @"messagePrivacy"])
  {
    __messagePrivacy = [decoder decodeIntForKey: @"messagePrivacy"];
    __messagePrivacy_isset = YES;
  }
  if ([decoder containsValueForKey: @"emailNotification"])
  {
    __emailNotification = [decoder decodeIntForKey: @"emailNotification"];
    __emailNotification_isset = YES;
  }
  if ([decoder containsValueForKey: @"searchable"])
  {
    __searchable = [decoder decodeBoolForKey: @"searchable"];
    __searchable_isset = YES;
  }
  if ([decoder containsValueForKey: @"showOnlineStatus"])
  {
    __showOnlineStatus = [decoder decodeBoolForKey: @"showOnlineStatus"];
    __showOnlineStatus_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__birthdayDisplay_isset)
  {
    [encoder encodeInt: __birthdayDisplay forKey: @"birthdayDisplay"];
  }
  if (__friendshipApproval_isset)
  {
    [encoder encodeInt: __friendshipApproval forKey: @"friendshipApproval"];
  }
  if (__commentsApproval_isset)
  {
    [encoder encodeInt: __commentsApproval forKey: @"commentsApproval"];
  }
  if (__messagePrivacy_isset)
  {
    [encoder encodeInt: __messagePrivacy forKey: @"messagePrivacy"];
  }
  if (__emailNotification_isset)
  {
    [encoder encodeInt: __emailNotification forKey: @"emailNotification"];
  }
  if (__searchable_isset)
  {
    [encoder encodeBool: __searchable forKey: @"searchable"];
  }
  if (__showOnlineStatus_isset)
  {
    [encoder encodeBool: __showOnlineStatus forKey: @"showOnlineStatus"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int) birthdayDisplay {
  return __birthdayDisplay;
}

- (void) setBirthdayDisplay: (int) birthdayDisplay {
  __birthdayDisplay = birthdayDisplay;
  __birthdayDisplay_isset = YES;
}

- (BOOL) birthdayDisplayIsSet {
  return __birthdayDisplay_isset;
}

- (void) unsetBirthdayDisplay {
  __birthdayDisplay_isset = NO;
}

- (int) friendshipApproval {
  return __friendshipApproval;
}

- (void) setFriendshipApproval: (int) friendshipApproval {
  __friendshipApproval = friendshipApproval;
  __friendshipApproval_isset = YES;
}

- (BOOL) friendshipApprovalIsSet {
  return __friendshipApproval_isset;
}

- (void) unsetFriendshipApproval {
  __friendshipApproval_isset = NO;
}

- (int) commentsApproval {
  return __commentsApproval;
}

- (void) setCommentsApproval: (int) commentsApproval {
  __commentsApproval = commentsApproval;
  __commentsApproval_isset = YES;
}

- (BOOL) commentsApprovalIsSet {
  return __commentsApproval_isset;
}

- (void) unsetCommentsApproval {
  __commentsApproval_isset = NO;
}

- (int) messagePrivacy {
  return __messagePrivacy;
}

- (void) setMessagePrivacy: (int) messagePrivacy {
  __messagePrivacy = messagePrivacy;
  __messagePrivacy_isset = YES;
}

- (BOOL) messagePrivacyIsSet {
  return __messagePrivacy_isset;
}

- (void) unsetMessagePrivacy {
  __messagePrivacy_isset = NO;
}

- (int) emailNotification {
  return __emailNotification;
}

- (void) setEmailNotification: (int) emailNotification {
  __emailNotification = emailNotification;
  __emailNotification_isset = YES;
}

- (BOOL) emailNotificationIsSet {
  return __emailNotification_isset;
}

- (void) unsetEmailNotification {
  __emailNotification_isset = NO;
}

- (BOOL) searchable {
  return __searchable;
}

- (void) setSearchable: (BOOL) searchable {
  __searchable = searchable;
  __searchable_isset = YES;
}

- (BOOL) searchableIsSet {
  return __searchable_isset;
}

- (void) unsetSearchable {
  __searchable_isset = NO;
}

- (BOOL) showOnlineStatus {
  return __showOnlineStatus;
}

- (void) setShowOnlineStatus: (BOOL) showOnlineStatus {
  __showOnlineStatus = showOnlineStatus;
  __showOnlineStatus_isset = YES;
}

- (BOOL) showOnlineStatusIsSet {
  return __showOnlineStatus_isset;
}

- (void) unsetShowOnlineStatus {
  __showOnlineStatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  [super read:inProtocol];
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setBirthdayDisplay: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setFriendshipApproval: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setCommentsApproval: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setMessagePrivacy: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setEmailNotification: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSearchable: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setShowOnlineStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [super write:outProtocol];
  [outProtocol writeStructBeginWithName: @"Preferences"];
  if (__birthdayDisplay_isset) {
    [outProtocol writeFieldBeginWithName: @"birthdayDisplay" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __birthdayDisplay];
    [outProtocol writeFieldEnd];
  }
  if (__friendshipApproval_isset) {
    [outProtocol writeFieldBeginWithName: @"friendshipApproval" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __friendshipApproval];
    [outProtocol writeFieldEnd];
  }
  if (__commentsApproval_isset) {
    [outProtocol writeFieldBeginWithName: @"commentsApproval" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __commentsApproval];
    [outProtocol writeFieldEnd];
  }
  if (__messagePrivacy_isset) {
    [outProtocol writeFieldBeginWithName: @"messagePrivacy" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __messagePrivacy];
    [outProtocol writeFieldEnd];
  }
  if (__emailNotification_isset) {
    [outProtocol writeFieldBeginWithName: @"emailNotification" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __emailNotification];
    [outProtocol writeFieldEnd];
  }
  if (__searchable_isset) {
    [outProtocol writeFieldBeginWithName: @"searchable" type: TType_BOOL fieldID: 6];
    [outProtocol writeBool: __searchable];
    [outProtocol writeFieldEnd];
  }
  if (__showOnlineStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"showOnlineStatus" type: TType_BOOL fieldID: 7];
    [outProtocol writeBool: __showOnlineStatus];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Preferences("];
  [ms appendString: @"birthdayDisplay:"];
  [ms appendFormat: @"%i", __birthdayDisplay];
  [ms appendString: @",friendshipApproval:"];
  [ms appendFormat: @"%i", __friendshipApproval];
  [ms appendString: @",commentsApproval:"];
  [ms appendFormat: @"%i", __commentsApproval];
  [ms appendString: @",messagePrivacy:"];
  [ms appendFormat: @"%i", __messagePrivacy];
  [ms appendString: @",emailNotification:"];
  [ms appendFormat: @"%i", __emailNotification];
  [ms appendString: @",searchable:"];
  [ms appendFormat: @"%i", __searchable];
  [ms appendString: @",showOnlineStatus:"];
  [ms appendFormat: @"%i", __showOnlineStatus];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation User

- (id) initWithId: (int64_t) id email: (NSString *) email username: (NSString *) username displayName: (NSString *) displayName avatar: (NSString *) avatar accountStatus: (int) accountStatus site: (Site *) site externalAccounts: (NSArray *) externalAccounts profile: (Profile *) profile preferences: (Preferences *) preferences
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __email = [email retain];
  __email_isset = YES;
  __username = [username retain];
  __username_isset = YES;
  __displayName = [displayName retain];
  __displayName_isset = YES;
  __avatar = [avatar retain];
  __avatar_isset = YES;
  __accountStatus = accountStatus;
  __accountStatus_isset = YES;
  __site = [site retain];
  __site_isset = YES;
  __externalAccounts = [externalAccounts retain];
  __externalAccounts_isset = YES;
  __profile = [profile retain];
  __profile_isset = YES;
  __preferences = [preferences retain];
  __preferences_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain];
    __username_isset = YES;
  }
  if ([decoder containsValueForKey: @"displayName"])
  {
    __displayName = [[decoder decodeObjectForKey: @"displayName"] retain];
    __displayName_isset = YES;
  }
  if ([decoder containsValueForKey: @"avatar"])
  {
    __avatar = [[decoder decodeObjectForKey: @"avatar"] retain];
    __avatar_isset = YES;
  }
  if ([decoder containsValueForKey: @"accountStatus"])
  {
    __accountStatus = [decoder decodeIntForKey: @"accountStatus"];
    __accountStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"site"])
  {
    __site = [[decoder decodeObjectForKey: @"site"] retain];
    __site_isset = YES;
  }
  if ([decoder containsValueForKey: @"externalAccounts"])
  {
    __externalAccounts = [[decoder decodeObjectForKey: @"externalAccounts"] retain];
    __externalAccounts_isset = YES;
  }
  if ([decoder containsValueForKey: @"profile"])
  {
    __profile = [[decoder decodeObjectForKey: @"profile"] retain];
    __profile_isset = YES;
  }
  if ([decoder containsValueForKey: @"preferences"])
  {
    __preferences = [[decoder decodeObjectForKey: @"preferences"] retain];
    __preferences_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
  if (__displayName_isset)
  {
    [encoder encodeObject: __displayName forKey: @"displayName"];
  }
  if (__avatar_isset)
  {
    [encoder encodeObject: __avatar forKey: @"avatar"];
  }
  if (__accountStatus_isset)
  {
    [encoder encodeInt: __accountStatus forKey: @"accountStatus"];
  }
  if (__site_isset)
  {
    [encoder encodeObject: __site forKey: @"site"];
  }
  if (__externalAccounts_isset)
  {
    [encoder encodeObject: __externalAccounts forKey: @"externalAccounts"];
  }
  if (__profile_isset)
  {
    [encoder encodeObject: __profile forKey: @"profile"];
  }
  if (__preferences_isset)
  {
    [encoder encodeObject: __preferences forKey: @"preferences"];
  }
}

- (void) dealloc
{
  [__email release];
  [__username release];
  [__displayName release];
  [__avatar release];
  [__site release];
  [__externalAccounts release];
  [__profile release];
  [__preferences release];
  [super dealloc];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) email {
  return [[__email retain] autorelease];
}

- (void) setEmail: (NSString *) email {
  [email retain];
  [__email release];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) username {
  return [[__username retain] autorelease];
}

- (void) setUsername: (NSString *) username {
  [username retain];
  [__username release];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release];
  __username = nil;
  __username_isset = NO;
}

- (NSString *) displayName {
  return [[__displayName retain] autorelease];
}

- (void) setDisplayName: (NSString *) displayName {
  [displayName retain];
  [__displayName release];
  __displayName = displayName;
  __displayName_isset = YES;
}

- (BOOL) displayNameIsSet {
  return __displayName_isset;
}

- (void) unsetDisplayName {
  [__displayName release];
  __displayName = nil;
  __displayName_isset = NO;
}

- (NSString *) avatar {
  return [[__avatar retain] autorelease];
}

- (void) setAvatar: (NSString *) avatar {
  [avatar retain];
  [__avatar release];
  __avatar = avatar;
  __avatar_isset = YES;
}

- (BOOL) avatarIsSet {
  return __avatar_isset;
}

- (void) unsetAvatar {
  [__avatar release];
  __avatar = nil;
  __avatar_isset = NO;
}

- (int) accountStatus {
  return __accountStatus;
}

- (void) setAccountStatus: (int) accountStatus {
  __accountStatus = accountStatus;
  __accountStatus_isset = YES;
}

- (BOOL) accountStatusIsSet {
  return __accountStatus_isset;
}

- (void) unsetAccountStatus {
  __accountStatus_isset = NO;
}

- (Site *) site {
  return [[__site retain] autorelease];
}

- (void) setSite: (Site *) site {
  [site retain];
  [__site release];
  __site = site;
  __site_isset = YES;
}

- (BOOL) siteIsSet {
  return __site_isset;
}

- (void) unsetSite {
  [__site release];
  __site = nil;
  __site_isset = NO;
}

- (NSArray *) externalAccounts {
  return [[__externalAccounts retain] autorelease];
}

- (void) setExternalAccounts: (NSArray *) externalAccounts {
  [externalAccounts retain];
  [__externalAccounts release];
  __externalAccounts = externalAccounts;
  __externalAccounts_isset = YES;
}

- (BOOL) externalAccountsIsSet {
  return __externalAccounts_isset;
}

- (void) unsetExternalAccounts {
  [__externalAccounts release];
  __externalAccounts = nil;
  __externalAccounts_isset = NO;
}

- (Profile *) profile {
  return [[__profile retain] autorelease];
}

- (void) setProfile: (Profile *) profile {
  [profile retain];
  [__profile release];
  __profile = profile;
  __profile_isset = YES;
}

- (BOOL) profileIsSet {
  return __profile_isset;
}

- (void) unsetProfile {
  [__profile release];
  __profile = nil;
  __profile_isset = NO;
}

- (Preferences *) preferences {
  return [[__preferences retain] autorelease];
}

- (void) setPreferences: (Preferences *) preferences {
  [preferences retain];
  [__preferences release];
  __preferences = preferences;
  __preferences_isset = YES;
}

- (BOOL) preferencesIsSet {
  return __preferences_isset;
}

- (void) unsetPreferences {
  [__preferences release];
  __preferences = nil;
  __preferences_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  [super read:inProtocol];
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDisplayName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAvatar: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setAccountStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRUCT) {
          Site *fieldValue = [[Site alloc] init];
          [fieldValue read: inProtocol];
          [self setSite: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            ExternalAccount *_elem2 = [[ExternalAccount alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release];
          }
          [inProtocol readListEnd];
          [self setExternalAccounts: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRUCT) {
          Profile *fieldValue = [[Profile alloc] init];
          [fieldValue read: inProtocol];
          [self setProfile: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRUCT) {
          Preferences *fieldValue = [[Preferences alloc] init];
          [fieldValue read: inProtocol];
          [self setPreferences: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [super write:outProtocol];
  [outProtocol writeStructBeginWithName: @"User"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  if (__displayName_isset) {
    if (__displayName != nil) {
      [outProtocol writeFieldBeginWithName: @"displayName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __displayName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__avatar_isset) {
    if (__avatar != nil) {
      [outProtocol writeFieldBeginWithName: @"avatar" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __avatar];
      [outProtocol writeFieldEnd];
    }
  }
  if (__accountStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"accountStatus" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __accountStatus];
    [outProtocol writeFieldEnd];
  }
  if (__site_isset) {
    if (__site != nil) {
      [outProtocol writeFieldBeginWithName: @"site" type: TType_STRUCT fieldID: 7];
      [__site write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__externalAccounts_isset) {
    if (__externalAccounts != nil) {
      [outProtocol writeFieldBeginWithName: @"externalAccounts" type: TType_LIST fieldID: 8];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__externalAccounts count]];
        int i4;
        for (i4 = 0; i4 < [__externalAccounts count]; i4++)
        {
          [[__externalAccounts objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__profile_isset) {
    if (__profile != nil) {
      [outProtocol writeFieldBeginWithName: @"profile" type: TType_STRUCT fieldID: 9];
      [__profile write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__preferences_isset) {
    if (__preferences != nil) {
      [outProtocol writeFieldBeginWithName: @"preferences" type: TType_STRUCT fieldID: 10];
      [__preferences write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"User("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @",displayName:"];
  [ms appendFormat: @"\"%@\"", __displayName];
  [ms appendString: @",avatar:"];
  [ms appendFormat: @"\"%@\"", __avatar];
  [ms appendString: @",accountStatus:"];
  [ms appendFormat: @"%i", __accountStatus];
  [ms appendString: @",site:"];
  [ms appendFormat: @"%@", __site];
  [ms appendString: @",externalAccounts:"];
  [ms appendFormat: @"%@", __externalAccounts];
  [ms appendString: @",profile:"];
  [ms appendFormat: @"%@", __profile];
  [ms appendString: @",preferences:"];
  [ms appendFormat: @"%@", __preferences];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Session

- (id) initWithCoreU: (NSString *) coreU coreX: (NSString *) coreX accessToken: (NSString *) accessToken sessionData: (NSDictionary *) sessionData status: (NSString *) status ip: (NSString *) ip agent: (NSString *) agent expiresTime: (int64_t) expiresTime user: (User *) user
{
  self = [super init];
  __coreU = [coreU retain];
  __coreU_isset = YES;
  __coreX = [coreX retain];
  __coreX_isset = YES;
  __accessToken = [accessToken retain];
  __accessToken_isset = YES;
  __sessionData = [sessionData retain];
  __sessionData_isset = YES;
  __status = [status retain];
  __status_isset = YES;
  __ip = [ip retain];
  __ip_isset = YES;
  __agent = [agent retain];
  __agent_isset = YES;
  __expiresTime = expiresTime;
  __expiresTime_isset = YES;
  __user = [user retain];
  __user_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"coreU"])
  {
    __coreU = [[decoder decodeObjectForKey: @"coreU"] retain];
    __coreU_isset = YES;
  }
  if ([decoder containsValueForKey: @"coreX"])
  {
    __coreX = [[decoder decodeObjectForKey: @"coreX"] retain];
    __coreX_isset = YES;
  }
  if ([decoder containsValueForKey: @"accessToken"])
  {
    __accessToken = [[decoder decodeObjectForKey: @"accessToken"] retain];
    __accessToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"sessionData"])
  {
    __sessionData = [[decoder decodeObjectForKey: @"sessionData"] retain];
    __sessionData_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [[decoder decodeObjectForKey: @"status"] retain];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"ip"])
  {
    __ip = [[decoder decodeObjectForKey: @"ip"] retain];
    __ip_isset = YES;
  }
  if ([decoder containsValueForKey: @"agent"])
  {
    __agent = [[decoder decodeObjectForKey: @"agent"] retain];
    __agent_isset = YES;
  }
  if ([decoder containsValueForKey: @"expiresTime"])
  {
    __expiresTime = [decoder decodeInt64ForKey: @"expiresTime"];
    __expiresTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"user"])
  {
    __user = [[decoder decodeObjectForKey: @"user"] retain];
    __user_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__coreU_isset)
  {
    [encoder encodeObject: __coreU forKey: @"coreU"];
  }
  if (__coreX_isset)
  {
    [encoder encodeObject: __coreX forKey: @"coreX"];
  }
  if (__accessToken_isset)
  {
    [encoder encodeObject: __accessToken forKey: @"accessToken"];
  }
  if (__sessionData_isset)
  {
    [encoder encodeObject: __sessionData forKey: @"sessionData"];
  }
  if (__status_isset)
  {
    [encoder encodeObject: __status forKey: @"status"];
  }
  if (__ip_isset)
  {
    [encoder encodeObject: __ip forKey: @"ip"];
  }
  if (__agent_isset)
  {
    [encoder encodeObject: __agent forKey: @"agent"];
  }
  if (__expiresTime_isset)
  {
    [encoder encodeInt64: __expiresTime forKey: @"expiresTime"];
  }
  if (__user_isset)
  {
    [encoder encodeObject: __user forKey: @"user"];
  }
}

- (void) dealloc
{
  [__coreU release];
  [__coreX release];
  [__accessToken release];
  [__sessionData release];
  [__status release];
  [__ip release];
  [__agent release];
  [__user release];
  [super dealloc];
}

- (NSString *) coreU {
  return [[__coreU retain] autorelease];
}

- (void) setCoreU: (NSString *) coreU {
  [coreU retain];
  [__coreU release];
  __coreU = coreU;
  __coreU_isset = YES;
}

- (BOOL) coreUIsSet {
  return __coreU_isset;
}

- (void) unsetCoreU {
  [__coreU release];
  __coreU = nil;
  __coreU_isset = NO;
}

- (NSString *) coreX {
  return [[__coreX retain] autorelease];
}

- (void) setCoreX: (NSString *) coreX {
  [coreX retain];
  [__coreX release];
  __coreX = coreX;
  __coreX_isset = YES;
}

- (BOOL) coreXIsSet {
  return __coreX_isset;
}

- (void) unsetCoreX {
  [__coreX release];
  __coreX = nil;
  __coreX_isset = NO;
}

- (NSString *) accessToken {
  return [[__accessToken retain] autorelease];
}

- (void) setAccessToken: (NSString *) accessToken {
  [accessToken retain];
  [__accessToken release];
  __accessToken = accessToken;
  __accessToken_isset = YES;
}

- (BOOL) accessTokenIsSet {
  return __accessToken_isset;
}

- (void) unsetAccessToken {
  [__accessToken release];
  __accessToken = nil;
  __accessToken_isset = NO;
}

- (NSDictionary *) sessionData {
  return [[__sessionData retain] autorelease];
}

- (void) setSessionData: (NSDictionary *) sessionData {
  [sessionData retain];
  [__sessionData release];
  __sessionData = sessionData;
  __sessionData_isset = YES;
}

- (BOOL) sessionDataIsSet {
  return __sessionData_isset;
}

- (void) unsetSessionData {
  [__sessionData release];
  __sessionData = nil;
  __sessionData_isset = NO;
}

- (NSString *) status {
  return [[__status retain] autorelease];
}

- (void) setStatus: (NSString *) status {
  [status retain];
  [__status release];
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  [__status release];
  __status = nil;
  __status_isset = NO;
}

- (NSString *) ip {
  return [[__ip retain] autorelease];
}

- (void) setIp: (NSString *) ip {
  [ip retain];
  [__ip release];
  __ip = ip;
  __ip_isset = YES;
}

- (BOOL) ipIsSet {
  return __ip_isset;
}

- (void) unsetIp {
  [__ip release];
  __ip = nil;
  __ip_isset = NO;
}

- (NSString *) agent {
  return [[__agent retain] autorelease];
}

- (void) setAgent: (NSString *) agent {
  [agent retain];
  [__agent release];
  __agent = agent;
  __agent_isset = YES;
}

- (BOOL) agentIsSet {
  return __agent_isset;
}

- (void) unsetAgent {
  [__agent release];
  __agent = nil;
  __agent_isset = NO;
}

- (int64_t) expiresTime {
  return __expiresTime;
}

- (void) setExpiresTime: (int64_t) expiresTime {
  __expiresTime = expiresTime;
  __expiresTime_isset = YES;
}

- (BOOL) expiresTimeIsSet {
  return __expiresTime_isset;
}

- (void) unsetExpiresTime {
  __expiresTime_isset = NO;
}

- (User *) user {
  return [[__user retain] autorelease];
}

- (void) setUser: (User *) user {
  [user retain];
  [__user release];
  __user = user;
  __user_isset = YES;
}

- (BOOL) userIsSet {
  return __user_isset;
}

- (void) unsetUser {
  [__user release];
  __user = nil;
  __user_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  [super read:inProtocol];
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCoreU: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCoreX: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccessToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_MAP) {
          int _size5;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size5];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            NSString * _key7 = [inProtocol readString];
            NSString * _val8 = [inProtocol readString];
            [fieldValue setObject: _val8 forKey: _key7];
          }
          [inProtocol readMapEnd];
          [self setSessionData: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAgent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setExpiresTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRUCT) {
          User *fieldValue = [[User alloc] init];
          [fieldValue read: inProtocol];
          [self setUser: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [super write:outProtocol];
  [outProtocol writeStructBeginWithName: @"Session"];
  if (__coreU_isset) {
    if (__coreU != nil) {
      [outProtocol writeFieldBeginWithName: @"coreU" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __coreU];
      [outProtocol writeFieldEnd];
    }
  }
  if (__coreX_isset) {
    if (__coreX != nil) {
      [outProtocol writeFieldBeginWithName: @"coreX" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __coreX];
      [outProtocol writeFieldEnd];
    }
  }
  if (__accessToken_isset) {
    if (__accessToken != nil) {
      [outProtocol writeFieldBeginWithName: @"accessToken" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __accessToken];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sessionData_isset) {
    if (__sessionData != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionData" type: TType_MAP fieldID: 4];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__sessionData count]];
        NSEnumerator * _iter9 = [__sessionData keyEnumerator];
        id key10;
        while ((key10 = [_iter9 nextObject]))
        {
          [outProtocol writeString: key10];
          [outProtocol writeString: [__sessionData objectForKey: key10]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__status_isset) {
    if (__status != nil) {
      [outProtocol writeFieldBeginWithName: @"status" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __status];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ip_isset) {
    if (__ip != nil) {
      [outProtocol writeFieldBeginWithName: @"ip" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __ip];
      [outProtocol writeFieldEnd];
    }
  }
  if (__agent_isset) {
    if (__agent != nil) {
      [outProtocol writeFieldBeginWithName: @"agent" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __agent];
      [outProtocol writeFieldEnd];
    }
  }
  if (__expiresTime_isset) {
    [outProtocol writeFieldBeginWithName: @"expiresTime" type: TType_I64 fieldID: 8];
    [outProtocol writeI64: __expiresTime];
    [outProtocol writeFieldEnd];
  }
  if (__user_isset) {
    if (__user != nil) {
      [outProtocol writeFieldBeginWithName: @"user" type: TType_STRUCT fieldID: 9];
      [__user write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Session("];
  [ms appendString: @"coreU:"];
  [ms appendFormat: @"\"%@\"", __coreU];
  [ms appendString: @",coreX:"];
  [ms appendFormat: @"\"%@\"", __coreX];
  [ms appendString: @",accessToken:"];
  [ms appendFormat: @"\"%@\"", __accessToken];
  [ms appendString: @",sessionData:"];
  [ms appendFormat: @"%@", __sessionData];
  [ms appendString: @",status:"];
  [ms appendFormat: @"\"%@\"", __status];
  [ms appendString: @",ip:"];
  [ms appendFormat: @"\"%@\"", __ip];
  [ms appendString: @",agent:"];
  [ms appendFormat: @"\"%@\"", __agent];
  [ms appendString: @",expiresTime:"];
  [ms appendFormat: @"%qi", __expiresTime];
  [ms appendString: @",user:"];
  [ms appendFormat: @"%@", __user];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation OnesiteDaoConstants
+ (void) initialize {
}
@end

